async function getFoodData(api_key) {								//params is a key:value list
	/*
	const req = new XMLHttpRequest();
	const uri = "https://api.nal.usda.gov/fdc/v1/foods/search";
	req.open("GET", uri);									//open request
	paramstr = new URLSearchParams(params);
	reqstr = (uri.concat("?",`API_KEY=${api_key}`,"&",paramstr));				//process key:value list and send to server
	console.log(reqstr);									//the URI generated by this code can be correctly used when clicked in chromium but not otherwise
	//await promisedClick(document.addEventListener("click", null));			//wait for mouseclick in window
	req.send(reqstr);
	req.onload = () => {									//set up event listener (executes upon load)
		if (req.status == 200) {
			document.getElementById("output").innerHTML = req.response;		//spit out the response using DOM
		} 
		else {										//403 (Forbidden)
			console.log(`Error: ${req.status} \r\n ${req.response}`);		//spit out an error using the console
		}
	}; */
	chrome.tabs.query({ active: true, currentWindow: true }, async (tabs) => {
		chrome.runtime.sendMessage(tabs[0].id,{init: true}, async (reply) => {
		
		let parameter = {
			query: reply.name, 
			dataType: "Branded",
			pageSize: 1,
			pageNumber: 1,
			sortBy: "dataType.keyword",
			sortOrder: "asc",
		};
		const uri = "https://api.nal.usda.gov/fdc/v1/foods/search";
		paramstr = new URLSearchParams (params); 
		reqstr = uri.concat("?",`api_key=${api_key}`,"&",paramstr);
		console.log(reqstr);
		var response = await fetch(reqstr,{method:"GET"});
		results = await response.json();
		console.log(results);
		var carbs, fibre, sodium, sugars, fats, energy;
		var gi, gl;
		let serving = results.foods[0].servingSize / (results.foods[0].servingSizeUnit === "g" ? 1 : 250);	//account for the fact that some serving sizes are given in cups (Not very common)
		for (let i = 0; i < results.foods[0].foodNutrients.length; i = i+1) {
			if (results.foods[0].foodNutrients[i].nutrientName.includes("Carbohydrate")) {
				carbs = results.foods[0].foodNutrients[i].value;									//this one is in grams
			}
			else if(results.foods[0].foodNutrients[i].nutrientName.includes("lipid")) {
				fats = results.foods[0].foodNutrients[i].value;									
			}
			else if(results.foods[0].foodNutrients[i].nutrientName.includes("Fiber")) {
				fibre = results.foods[0].foodNutrients[i].value;
			}
			else if(results.foods[0].foodNutrients[i].nutrientName.includes("Sodium")) {
				sodium = results.foods[0].foodNutrients[i].value/ 1000;							//mg -> grams
			}
			else if (results.foods[0].foodNutrients[i].nutrientName.toLowerCase().includes("sugar")) {
				sugars = results.foods[0].foodNutrients[i].value;							//grams
			}
			else if (results.foods[0].foodNutrients[i].nutrientName.toLowerCase().includes("energy")) {
				energy = results.foods[0].foodNutrients[i].value;
			}
		}
		gi = Math.round(((carbs - fibre)* 65 + (sugars)*25)/carbs);
		gl = Math.round((gi*carbs)/(serving*100));
		console.log(gi, gl, carbs, fibre,sodium,sugars,fats,energy);
		nutritionalInfo = {
			glycaemicIndex: gi,
			glycaemicLoad: gl,
			energy: energy,
		};
		chrome.runtime.sendMessage(tabs[0].id,nutritionalInfo);
	});
});
let key = "ifCZAscHCiFT5kcgxyDgDv6KW3dHzgnUIsvvFP4W";
getFoodData(key);
