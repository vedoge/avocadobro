function promisedClick(listener) {
	return new Promise ( (resolve) => {
		document.removeEventListener("click", listener);
		resolve();
	});
}

function getFoodData(api_key, params) {								//params is a key:value list
	/*
	const req = new XMLHttpRequest();
	const uri = "https://api.nal.usda.gov/fdc/v1/foods/search";
	req.open("GET", uri);									//open request
	paramstr = new URLSearchParams(params);
	reqstr = (uri.concat("?",`API_KEY=${api_key}`,"&",paramstr));				//process key:value list and send to server
	console.log(reqstr);									//the URI generated by this code can be correctly used when clicked in chromium but not otherwise
	//await promisedClick(document.addEventListener("click", null));			//wait for mouseclick in window
	req.send(reqstr);
	req.onload = () => {									//set up event listener (executes upon load)
		if (req.status == 200) {
			document.getElementById("output").innerHTML = req.response;		//spit out the response using DOM
		} 
		else {										//403 (Forbidden)
			console.log(`Error: ${req.status} \r\n ${req.response}`);		//spit out an error using the console
		}
	}; */
	const uri = "https://api.nal.usda.gov/fdc/v1/foods/search";
	paramstr = new URLSearchParams (params); 
	reqstr = uri.concat("?",`api_key=${api_key}`,"&",paramstr);
	console.log(reqstr);
	let response = "";
	fetch(reqstr,{method:"GET"}).then((req) => {
			
		return req.json();
		}).catch((req) => {
			//console.log(await req.json());
			return null;
		});
}
function productSearch(productName) {
	let key = "ifCZAscHCiFT5kcgxyDgDv6KW3dHzgnUIsvvFP4W";
	let data = await getFoodData(key, {
		query: productName,
		dataType: "Branded",
		pageSize: 25,
		pageNumber: 2,
		sortBy: "dataType.keyword",
		sortOrder: "asc",
		brandOwner: "Kar Nut Products Company"
	});
	// loop through nutrients (to be implemented tomorrow) 
	// calculate glycaemic index as (total mass of simple sugar)*65 + (total mass of carbohydrate - total mass of sugar - total dietary fibre)*60 if the product contains soy before rice, wheat, or potatoes or *70 otherwise. 
	// Glycaemic load: 50 / (g per 100g of carbohydrate)
	// Use High GI, high GL as a horrendous benchmark
	// High GI, Low GL => little cause for concern
	// Low GI, High GL => Okay in medium portions
	// Low, Low => no cause for concern
	// Balance electrolytes - alert to high levels of sodium 
	// Lipids - alert to high levels of lipids (hyperlipidaemia) 
	//
}


